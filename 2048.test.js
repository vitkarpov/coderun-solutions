import { test, expect, describe } from "vitest";
import solution from "./2048";

describe("D", () => {
  test.each([
    [
      [
        [0, 2, 4, 8],
        [0, 0, 0, 0],
        [0, 2, 2, 8],
        [0, 2, 2, 2],
      ],
      [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 4, 4, 16],
        [0, 2, 4, 2],
      ],
    ],
    [
      [
        [2, 0, 2, 4],
        [2, 2, 2, 2],
        [4, 8, 0, 16],
        [8, 16, 4, 0],
      ],
      [
        [0, 0, 0, 0],
        [4, 2, 0, 4],
        [4, 8, 4, 2],
        [8, 16, 4, 16],
      ],
    ],
    [
      [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [4, 2, 0, 0],
        [32, 8, 4, 0],
      ],
      [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [4, 2, 0, 0],
        [32, 8, 4, 0],
      ],
    ],
    [
      [
        [0, 0, 0, 2],
        [0, 0, 0, 2],
        [0, 0, 0, 2],
        [0, 0, 0, 0],
      ],
      [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 4],
        [0, 0, 0, 2],
      ],
    ],
  ])("%#", (input, output) => {
    expect(solution(input, "D")).toStrictEqual(output);
  });
});

describe("L", () => {
  test.each([
    [
      [
        [8, 0, 0, 0],
        [0, 16, 0, 0],
        [0, 0, 32, 0],
        [0, 0, 0, 64],
      ],
      [
        [8, 0, 0, 0],
        [16, 0, 0, 0],
        [32, 0, 0, 0],
        [64, 0, 0, 0],
      ],
    ],
    [
      [
        [8, 0, 16, 0],
        [0, 16, 0, 32],
        [8, 0, 32, 0],
        [0, 16, 0, 64],
      ],
      [
        [8, 16, 0, 0],
        [16, 32, 0, 0],
        [8, 32, 0, 0],
        [16, 64, 0, 0],
      ],
    ],
    [
      [
        [8, 8, 16, 16],
        [16, 16, 8, 8],
        [32, 32, 0, 0],
        [16, 16, 32, 32],
      ],
      [
        [16, 32, 0, 0],
        [32, 16, 0, 0],
        [64, 0, 0, 0],
        [32, 64, 0, 0],
      ],
    ],
    [
      [
        [0, 2, 4, 8],
        [0, 0, 0, 0],
        [0, 2, 2, 8],
        [0, 2, 2, 2],
      ],
      [
        [2, 4, 8, 0],
        [0, 0, 0, 0],
        [4, 8, 0, 0],
        [4, 2, 0, 0],
      ],
    ],
    [
      [
        [2, 0, 2, 4],
        [2, 2, 2, 2],
        [4, 8, 0, 16],
        [8, 16, 4, 0],
      ],
      [
        [4, 4, 0, 0],
        [4, 4, 0, 0],
        [4, 8, 16, 0],
        [8, 16, 4, 0],
      ],
    ],
    [
      [
        [16, 32, 64, 0],
        [8, 2, 0, 0],
        [8, 0, 0, 0],
        [4, 0, 0, 0],
      ],
      [
        [16, 32, 64, 0],
        [8, 2, 0, 0],
        [8, 0, 0, 0],
        [4, 0, 0, 0],
      ],
    ],
  ])("%#", (input, output) => {
    expect(solution(input, "L")).toStrictEqual(output);
  });
});

describe("R", () => {
  test.each([
    [
      [
        [2, 0, 2, 4],
        [2, 2, 2, 2],
        [4, 8, 0, 16],
        [8, 16, 4, 0],
      ],
      [
        [0, 0, 4, 4],
        [0, 0, 4, 4],
        [0, 4, 8, 16],
        [0, 8, 16, 4],
      ],
    ],
    [
      [
        [0, 64, 32, 16],
        [0, 0, 2, 8],
        [0, 0, 0, 8],
        [0, 0, 0, 4],
      ],
      [
        [0, 64, 32, 16],
        [0, 0, 2, 8],
        [0, 0, 0, 8],
        [0, 0, 0, 4],
      ],
    ],
    [
      [
        [0, 0, 8, 8],
        [16, 16, 16, 16],
        [32, 32, 64, 128],
        [2, 2, 4, 8],
      ],
      [
        [0, 0, 0, 16],
        [0, 0, 32, 32],
        [0, 64, 64, 128],
        [0, 4, 4, 8],
      ],
    ],
  ])("%#", (input, output) => {
    expect(solution(input, "R")).toStrictEqual(output);
  });
});

describe("U", () => {
  test.each([
    [
      [
        [0, 2, 4, 8],
        [0, 0, 0, 0],
        [0, 2, 2, 8],
        [0, 2, 2, 2],
      ],
      [
        [0, 4, 4, 16],
        [0, 2, 4, 2],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
      ],
    ],
    [
      [
        [2, 0, 2, 4],
        [2, 2, 2, 2],
        [4, 8, 0, 16],
        [8, 16, 4, 0],
      ],
      [
        [4, 2, 4, 4],
        [4, 8, 4, 2],
        [8, 16, 0, 16],
        [0, 0, 0, 0],
      ],
    ],
    [
      [
        [4, 8, 16, 32],
        [16, 4, 64, 0],
        [2, 2, 0, 0],
        [4, 0, 0, 0],
      ],
      [
        [4, 8, 16, 32],
        [16, 4, 64, 0],
        [2, 2, 0, 0],
        [4, 0, 0, 0],
      ],
    ],
    [
      [
        [0, 0, 0, 2],
        [0, 0, 0, 2],
        [0, 0, 0, 2],
        [0, 0, 0, 0],
      ],
      [
        [0, 0, 0, 4],
        [0, 0, 0, 2],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
      ],
    ],
  ])("%#", (input, output) => {
    expect(solution(input, "U")).toStrictEqual(output);
  });
});

test("mutliple moves", () => {
  expect(
    solution(
      [
        [4, 8, 16, 32],
        [16, 4, 64, 0],
        [2, 2, 0, 0],
        [4, 0, 0, 0],
      ],
      "U L"
    )
  ).toStrictEqual([
    [4, 8, 16, 32],
    [16, 4, 64, 0],
    [4, 0, 0, 0],
    [4, 0, 0, 0],
  ]);
});
